name: Django CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # 1. Build Stage
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]  # Use Python version compatible with your dependencies

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Save Dependencies Artifact
      uses: actions/upload-artifact@v3
      with:
        name: dependencies
        path: $(pip cache dir)

  # 2. Test Stage
  test:
    runs-on: ubuntu-latest
    needs: build  # Run test stage after build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Dependencies Artifact
      uses: actions/download-artifact@v3
      with:
        name: dependencies

    - name: Run Tests
      run: |
        python manage.py test

  # 3. Release Stage
  release:
    runs-on: ubuntu-latest
    needs: test  # Run release stage after test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }} .

    - name: Push Docker Image
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}

    - name: Log out of Docker Hub
      run: docker logout

  # 4. Deploy Stage
  deploy:
    runs-on: ubuntu-latest
    needs: release  # Run deploy stage after release
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up SSH Key
      run: |
        echo "${{ secrets.SSH_KEY }}" > ssh_key.pem
        chmod 400 ssh_key.pem

    - name: Deploy to Server
      run: |
        ssh -o StrictHostKeyChecking=no -i ssh_key.pem user@your-server-ip "
          docker login -u ${ secrets.DOCKER_USERNAME } -p ${ secrets.DOCKER_PASSWORD } &&
          docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }} &&
          docker stop myapp || true &&
          docker rm myapp || true &&
          docker run -d --name myapp -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/myapp:${{ github.sha }}"
